{"version":3,"sources":["assets/logo.svg","components/Footer.tsx","consts/colors.ts","components/Header.tsx","consts/regex.ts","services/inputParser.ts","services/audio.ts","components/Player.tsx","containers/Song.tsx","containers/SongList.tsx","containers/App.tsx","consts/presets.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","footerStyle","css","linkStyle","Footer","className","role","aria-label","rel","target","href","headerStyle","logoStyle","Header","src","logo","alt","NOTE_REGEX","parseNotes","notes","split","map","note","match","filter","duration","extendedLength","sharp","tone","octave","pauseDuration","extendedPauseLength","rest","parseInt","Boolean","lastSequence","Tone","require","mainStyle","Player","tempo","audio","React","length","Transport","bpm","value","stop","synth","Synth","toMaster","nextTone","parts","forEach","Time","toUpperCase","push","sequence","Part","time","triggerAttackRelease","loop","playbackRate","start","createAudio","type","onClick","inputStyle","toolbarStyle","nameStyle","Song","song","onSave","history","parsed","setParsed","name","setName","setTempo","historyInstance","useHistory","defaultValue","replace","join","goBack","onChange","e","placeholder","id","listStyle","SongList","songs","key","to","layoutStyle","presets","JSON","parse","localStorage","getItem","preset","window","location","hostname","injectGlobal","ReactDOM","render","setSongs","onSaveClick","data","includes","Object","assign","uuidv1","newSongList","setItem","stringify","path","exact","props","find","item","params","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1002faf8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0a217aa9.svg\";","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport { SECONDARY_TEXT_COLOR } from '../consts/colors';\n\nconst footerStyle = css`\n  font-size: 12px;\n  text-align: center;\n  box-shadow: 0 0 5px #000;\n  padding: 2px 0 4px;\n`;\n\nconst linkStyle = css`\n  color: ${SECONDARY_TEXT_COLOR};\n  font-weight: 600;\n  text-decoration: none;\n`;\n\nexport const Footer = () => (\n  <div className={footerStyle}>\n    Made with{' '}\n    <span role=\"img\" aria-label=\"love\">\n      ❤️\n    </span>{' '}\n    by{' '}\n    <a className={linkStyle} rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/DarkoKukovec\">\n      @DarkoKukovec\n    </a>\n  </div>\n);\n","export const LINK_COLOR = '#61dafb';\nexport const BACKGROUND_PRIMARY = '#282c34';\n\nexport const PRIMARY_COLOR = '#79a682';\nexport const SECONDARY_COLOR = '#2B303D';\n\nexport const PRIMARY_TEXT_COLOR = '#242D23';\nexport const SECONDARY_TEXT_COLOR = '#D9EFF9';\n","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport logo from '../assets/logo.svg';\n\nconst headerStyle = css`\n  height: 50px;\n  box-shadow: 0 0 5px #000;\n  padding: 7px 16px;\n`;\n\nconst logoStyle = css`\n  height: 50px;\n`;\n\nexport const Header = () => (\n  <header className={headerStyle}>\n    <img className={logoStyle} src={logo} alt=\"Retro Composer\" />\n  </header>\n);\n","export const NOTE_REGEX = /(\\d+)(\\.)?(#)?([abcdefg])([123])|(\\d+)(\\.)?(-)/;\n","import { NOTE_REGEX } from '../consts/regex';\nimport { INoteRecord } from '../interfaces/INoteRecord';\nimport { Tone } from '../enums/Tone';\n\nexport function parseNotes(notes: string): Array<INoteRecord> {\n  return notes\n    .split(/\\s+/g)\n    .map((note) => note.match(NOTE_REGEX))\n    .filter((note) => note !== null)\n    .map(([_match, duration, extendedLength, sharp, tone, octave, pauseDuration, extendedPauseLength, rest]: any) =>\n      duration\n        ? {\n            duration: parseInt(duration, 10),\n            extendedLength: Boolean(extendedLength),\n            sharp: Boolean(sharp),\n            tone: `${tone}${sharp || ''}` as Tone,\n            octave: parseInt(octave, 10),\n          }\n        : {\n            duration: parseInt(pauseDuration, 10),\n            extendedLength: Boolean(extendedPauseLength),\n            rest: Boolean(rest),\n          },\n    );\n}\n\nexport function serializeNotes(notes: Array<INoteRecord>): string {\n  return notes\n    .map((note) =>\n      'tone' in note\n        ? `${note.duration}${note.extendedLength ? '.' : ''}${note.sharp ? '#' : ''}${note.tone.replace('#', '')}${\n            note.octave\n          }`\n        : `${note.duration}${note.extendedLength ? '.' : ''}-`,\n    )\n    .join(' ');\n}\n","import { INoteRecord } from '../interfaces/INoteRecord';\n\nconst Tone = require('tone');\n\nlet lastSequence: any;\n\nexport function createAudio(notes: Array<INoteRecord>, tempo: number) {\n  Tone.Transport.bpm.value = tempo;\n  if (lastSequence) {\n    lastSequence.stop();\n  }\n  const synth = new Tone.Synth().toMaster();\n  let nextTone = 0;\n\n  const parts: Array<[number, [string, number]]> = [];\n  notes.forEach((note) => {\n    const duration = Tone.Time(`${note.duration}n`) * (note.extendedLength ? 1.5 : 1);\n    if ('tone' in note) {\n      const tone = `${note.tone.toUpperCase()}${2 + note.octave}`;\n      parts.push([nextTone, [tone, duration]]);\n    }\n    nextTone += duration;\n  });\n\n  const sequence = (lastSequence = new Tone.Part((time: number, [tone, duration]: [string, number]) => {\n    synth.triggerAttackRelease(tone, duration, time);\n  }, parts));\n\n  sequence.loop = false;\n  sequence.playbackRate = 1;\n\n  Tone.Transport.start();\n\n  return sequence;\n}\n","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport { INoteRecord } from '../interfaces/INoteRecord';\nimport { createAudio } from '../services/audio';\n\nconst mainStyle = css`\n  font-size: 20px;\n  padding: 4px;\n`;\n\nexport const Player: React.FC<{\n  notes: Array<INoteRecord>;\n  tempo: number;\n}> = ({ notes, tempo }) => {\n  const audio = React.useMemo(() => (notes.length ? createAudio(notes, tempo) : null), [notes, tempo]);\n\n  React.useEffect(() => {\n    return () => {\n      if (audio) {\n        audio.stop();\n      }\n    };\n  }, [audio]);\n\n  const onPlay = () => {\n    if (audio) {\n      audio.stop();\n      audio.start();\n    }\n  };\n\n  const onStop = () => {\n    if (audio) {\n      audio.stop();\n    }\n  };\n\n  return (\n    <div className={mainStyle}>\n      <button type=\"button\" onClick={onPlay}>\n        Play\n      </button>\n      <button type=\"button\" onClick={onStop}>\n        Stop\n      </button>\n    </div>\n  );\n};\n","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport { parseNotes, serializeNotes } from '../services/inputParser';\nimport { Player } from '../components/Player';\nimport { ISong } from '../interfaces/ISong';\nimport { useHistory } from 'react-router-dom';\n\nconst mainStyle = css`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst inputStyle = css`\n  width: calc(100% - 32px);\n  font-size: 24px;\n  padding: 16px;\n  flex: 1;\n`;\n\nconst toolbarStyle = css`\n  display: flex;\n  padding: 8px 4px 0;\n`;\n\nconst nameStyle = css`\n  flex: 1;\n`;\n\nexport const Song: React.FC<{\n  song: Partial<ISong>;\n  onSave(song: Partial<ISong>, data: Partial<ISong>): string;\n  history: { goBack(): void };\n}> = ({ song, onSave, history }) => {\n  const [parsed, setParsed] = React.useState(song.notes || []);\n  const [name, setName] = React.useState(song.name || '');\n  const [tempo, setTempo] = React.useState(song.tempo || 100);\n  const onChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => setParsed(parseNotes(e.target.value));\n  const onNameChange = (e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value);\n  const onTempoChange = (e: React.ChangeEvent<HTMLInputElement>) => setTempo(parseInt(e.target.value, 10) || 100);\n  const historyInstance = useHistory();\n  const onSaveClick = () => {\n    const id = onSave(song, {\n      name,\n      tempo,\n      notes: parsed,\n    });\n\n    if (id !== song.id) {\n      historyInstance.replace(`/${id}`);\n    }\n  };\n\n  const onBackClick = () => {\n    history.goBack();\n  };\n  const defaultValue = serializeNotes(song.notes || []);\n\n  return (\n    <div className={mainStyle}>\n      <div className={toolbarStyle}>\n        <button type=\"button\" onClick={onBackClick}>\n          Back\n        </button>\n        <input className={nameStyle} value={name} onChange={onNameChange} placeholder=\"Song name\" />\n        Tempo: <input type=\"number\" value={tempo} onChange={onTempoChange} />\n        <button type=\"button\" onClick={onSaveClick}>\n          Save\n        </button>\n      </div>\n      <textarea className={inputStyle} defaultValue={defaultValue} onChange={onChange}></textarea>\n      <Player notes={parsed} tempo={tempo} />\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-bind */\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { ISong } from '../interfaces/ISong';\nimport { css } from 'emotion';\nimport { PRIMARY_TEXT_COLOR, PRIMARY_COLOR } from '../consts/colors';\n\nconst listStyle = css`\n  margin: 0;\n  padding: 4px;\n  list-style: none;\n`;\n\nconst linkStyle = css`\n  font-size: 24px;\n  cursor: pointer;\n  padding: 6px;\n  text-decoration: none;\n  display: block;\n\n  &:hover {\n    background: ${PRIMARY_TEXT_COLOR};\n    color: ${PRIMARY_COLOR};\n  }\n`;\n\nexport const SongList: React.FC<{\n  songs: Array<ISong>;\n}> = ({ songs }) => {\n  return (\n    <ul className={listStyle}>\n      {songs.map((song) => (\n        <li key={song.name}>\n          <Link className={linkStyle} to={`/${song.id}`}>\n            {song.name}\n          </Link>\n        </li>\n      ))}\n      <li>\n        <Link className={linkStyle} to=\"/new\">\n          New song\n        </Link>\n      </li>\n    </ul>\n  );\n};\n","/* eslint-disable react/jsx-no-bind */\nimport { css } from 'emotion';\nimport * as React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport { v1 as uuidv1 } from 'uuid';\n\nimport { Footer } from '../components/Footer';\nimport { Header } from '../components/Header';\nimport { PRIMARY_COLOR, PRIMARY_TEXT_COLOR } from '../consts/colors';\nimport { Song } from './Song';\nimport { PRESETS } from '../consts/presets';\nimport { parseNotes } from '../services/inputParser';\nimport { ISong } from '../interfaces/ISong';\nimport { SongList } from './SongList';\n\nconst layoutStyle = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst mainStyle = css`\n  flex: 1;\n  background: ${PRIMARY_COLOR};\n  color: ${PRIMARY_TEXT_COLOR};\n  font-size: 20px;\n  font-family: VT323, monospace;\n`;\n\nconst saved: Array<ISong> | null = JSON.parse(localStorage.getItem('saved-songs') || 'null');\nconst presets = saved || PRESETS.map((preset) => ({ ...preset, notes: parseNotes(preset.notes) }));\n\nexport const App = () => {\n  const [songs, setSongs] = React.useState(presets);\n\n  const onSaveClick = (song: Partial<ISong>, data: Partial<ISong>): string => {\n    if (songs.includes(song as ISong)) {\n      Object.assign(song, data);\n      return song.id as string;\n    } else {\n      const id = uuidv1();\n      const newSongList: Array<ISong> = [...songs, { name: 'Undefined', ...data, id } as ISong];\n      localStorage.setItem('saved-songs', JSON.stringify(newSongList));\n      setSongs(newSongList);\n      return id;\n    }\n  };\n\n  return (\n    <div className={layoutStyle}>\n      <Header />\n      <main className={mainStyle}>\n        <BrowserRouter>\n          <Route path=\"/\" exact render={() => <SongList songs={songs} />} />\n          <Route\n            path=\"/:id\"\n            render={(props) => {\n              const song = songs.find((item) => item.id === props.match.params.id) || {};\n              return <Song {...props} song={song} onSave={onSaveClick} />;\n            }}\n          />\n        </BrowserRouter>\n      </main>\n      <Footer />\n    </div>\n  );\n};\n","export const PRESETS = [\n  {\n    id: 'sample-1',\n    name: 'Europe - The final countdown',\n    tempo: 125,\n    notes:\n      '4- 8- 16b2 16a2 4b2 4e2 4- 8- 16c3 16b2 8c3 8b2 4a2 4- 8- 16c3 16b2 4c3 4e2 4- 8- 16a2 16g2 8a2 8g2 8#f2 8a2 4g2 8- 16#f2 16g2 4a2 8- 16g2 16a2 8b2 8a2 8g2 8#f2 4e2 4c3 2b2 4- 16b2 16c3 16b2 16a2 1b2',\n  },\n  {\n    id: 'sample-2',\n    name: 'A-ha - Take on me',\n    tempo: 100,\n    notes:\n      '8- 16#a1 16#a1 16#a1 8#f1 8#d1 8#g1 8#g1 16#g1 16c2 16c2 16#c2 16#d2 16#c2 16#c2 16#c2 8#g1 8#f1 8#a1 8#a1 16#a1 16#g1 16#g1 16#a1 16#g1 16#a1 16#a1 16#a1 8#f1 8#d1 8#g1 8#g1 16#g1 16c2 16c2 16#c2 16#d2 16#c2 16#c2 16#c2 8#g1 8#f1 8#a1 8#a1',\n  },\n];\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { injectGlobal } from 'emotion';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './containers/App';\nimport { SECONDARY_TEXT_COLOR, SECONDARY_COLOR, PRIMARY_TEXT_COLOR, PRIMARY_COLOR } from './consts/colors';\n\nimport * as serviceWorker from './serviceWorker';\n\ninjectGlobal`\n  html, body {\n    margin: 0;\n    height: 100%;\n    background: ${SECONDARY_COLOR};\n  }\n\n  #root {\n    height: 100%;\n    font-family: Quicksand, sans-serif;\n    font-size: 12px;\n    font-weight: 400;\n    color: ${SECONDARY_TEXT_COLOR};\n  }\n\n  button {\n    appearence: none;\n    border: 1px solid ${PRIMARY_TEXT_COLOR};\n    background: transparent;\n    font-family: VT323, monospace;\n    font-size: 20px;\n    margin: 0 4px;\n    outline: none;\n    color: ${PRIMARY_TEXT_COLOR};\n    cursor: pointer;\n  \n    &:hover {\n      background: ${PRIMARY_TEXT_COLOR};\n      color: ${PRIMARY_COLOR};\n    }\n  }\n\n  input,\n  textarea {\n    border: none;\n    background: transparent;\n    font-family: VT323, monospace;\n    font-size: 20px;\n    color: ${PRIMARY_TEXT_COLOR};\n  }\n`;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
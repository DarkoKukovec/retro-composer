{"version":3,"sources":["components/Footer.tsx","consts/colors.ts","components/Header.tsx","consts/regex.ts","services/inputParser.ts","components/Player.tsx","containers/InputContainer.tsx","containers/App.tsx","serviceWorker.ts","index.tsx","assets/logo.svg"],"names":["footerStyle","css","linkStyle","Footer","className","role","aria-label","rel","target","href","headerStyle","logoStyle","Header","src","logo","alt","NOTE_REGEX","parseNotes","notes","split","map","note","match","filter","duration","extendedLength","sharp","tone","octave","pauseDuration","extendedPauseLength","rest","parseInt","Boolean","lastSequence","Tone","require","window","Player","React","tempo","setTempo","audio","Transport","bpm","value","stop","synth","Synth","toMaster","nextTone","parts","forEach","Time","toUpperCase","push","sequence","Part","time","triggerAttackRelease","loop","playbackRate","start","createAudio","type","onClick","onChange","e","SAMPLE_SONG","mainStyle","inputStyle","parsedStyle","InputContainer","parsed","setParsed","defaultValue","JSON","stringify","layoutStyle","location","hostname","injectGlobal","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.5dcd7ae4.chunk.js","sourcesContent":["import { css } from 'emotion';\nimport * as React from 'react';\n\nimport { SECONDARY_TEXT_COLOR } from '../consts/colors';\n\nconst footerStyle = css`\n  font-size: 12px;\n  text-align: center;\n  box-shadow: 0 0 5px #000;\n  padding: 2px 0 4px;\n`;\n\nconst linkStyle = css`\n  color: ${SECONDARY_TEXT_COLOR};\n  font-weight: 600;\n  text-decoration: none;\n`;\n\nexport const Footer = () => (\n  <div className={footerStyle}>\n    Made with{' '}\n    <span role=\"img\" aria-label=\"love\">\n      ❤️\n    </span>{' '}\n    by{' '}\n    <a className={linkStyle} rel=\"noopener noreferrer\" target=\"_blank\" href=\"https://twitter.com/DarkoKukovec\">\n      @DarkoKukovec\n    </a>\n  </div>\n);\n","export const LINK_COLOR = '#61dafb';\nexport const BACKGROUND_PRIMARY = '#282c34';\n\nexport const PRIMARY_COLOR = '#79a682';\nexport const SECONDARY_COLOR = '#2B303D';\n\nexport const PRIMARY_TEXT_COLOR = '#242D23';\nexport const SECONDARY_TEXT_COLOR = '#D9EFF9';\n","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport logo from '../assets/logo.svg';\n\nconst headerStyle = css`\n  height: 50px;\n  box-shadow: 0 0 5px #000;\n  padding: 7px 16px;\n`;\n\nconst logoStyle = css`\n  height: 50px;\n`;\n\nexport const Header = () => (\n  <header className={headerStyle}>\n    <img className={logoStyle} src={logo} alt=\"Retro Composer\" />\n  </header>\n);\n","export const NOTE_REGEX = /(\\d+)(\\.)?(#)?([abcdefg])([123])|(\\d+)(\\.)?(-)/;\n","import { NOTE_REGEX } from '../consts/regex';\nimport { INoteRecord } from '../interfaces/INoteRecord';\nimport { Tone } from '../enums/Tone';\n\nexport function parseNotes(notes: string): Array<INoteRecord> {\n  return notes\n    .split(/\\s+/g)\n    .map((note) => note.match(NOTE_REGEX))\n    .filter((note) => note !== null)\n    .map(([_match, duration, extendedLength, sharp, tone, octave, pauseDuration, extendedPauseLength, rest]: any) =>\n      duration\n        ? {\n            duration: parseInt(duration, 10),\n            extendedLength: Boolean(extendedLength),\n            sharp: Boolean(sharp),\n            tone: `${tone}${sharp || ''}` as Tone,\n            octave: parseInt(octave, 10),\n          }\n        : {\n            duration: parseInt(pauseDuration, 10),\n            extendedLength: Boolean(extendedPauseLength),\n            rest: Boolean(rest),\n          },\n    );\n}\n","import * as React from 'react';\n\nimport { INoteRecord } from '../interfaces/INoteRecord';\n\nconst Tone = require('tone');\n\nlet lastSequence: any;\n\n//@ts-ignore\nwindow.Tone = Tone;\n\nfunction createAudio(notes: Array<INoteRecord>, tempo: number) {\n  Tone.Transport.bpm.value = tempo;\n  if (lastSequence) {\n    lastSequence.stop();\n  }\n  const synth = new Tone.Synth().toMaster();\n  let nextTone = 0;\n\n  const parts: Array<[number, [string, number]]> = [];\n  notes.forEach((note) => {\n    const duration = Tone.Time(`${note.duration}n`) * (note.extendedLength ? 1.5 : 1);\n    if ('tone' in note) {\n      const tone = `${note.tone.toUpperCase()}${2 + note.octave}`;\n      parts.push([nextTone, [tone, duration]]);\n    }\n    nextTone += duration;\n  });\n\n  const sequence = (lastSequence = new Tone.Part((time: number, [tone, duration]: [string, number]) => {\n    synth.triggerAttackRelease(tone, duration, time);\n  }, parts));\n\n  sequence.loop = false;\n  sequence.playbackRate = 1;\n\n  Tone.Transport.start();\n\n  return sequence;\n}\n\nexport const Player: React.FC<{\n  notes: Array<INoteRecord>;\n}> = ({ notes }) => {\n  const [tempo, setTempo] = React.useState(125);\n  const audio = React.useMemo(() => createAudio(notes, tempo), [notes]);\n  return (\n    <div>\n      <button type=\"button\" onClick={() => audio.stop() && audio.start()}>\n        Play\n      </button>\n      <button type=\"button\" onClick={() => audio.stop()}>\n        Stop\n      </button>\n      Tempo: <input value={tempo} onChange={(e) => setTempo(parseInt(e.target.value, 10) || 125)} />\n    </div>\n  );\n};\n","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport { PRIMARY_TEXT_COLOR } from '../consts/colors';\nimport { parseNotes } from '../services/inputParser';\nimport { Player } from '../components/Player';\n\nconst SAMPLE_SONG =\n  '4- 8- 16b2 16a2 4b2 4e2 4- 8- 16c3 16b2 8c3 8b2 4a2 4- 8- 16c3 16b2 4c3 4e2 4- 8- 16a2 16g2 8a2 8g2 8#f2 8a2 4g2 8- 16#f2 16g2 4a2 8- 16g2 16a2 8b2 8a2 8g2 8#f2 4e2 4c3 2b2 4- 16b2 16c3 16b2 16a2 1b2';\n\nconst mainStyle = css`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst inputStyle = css`\n  border: none;\n  background: transparent;\n  width: calc(100% - 32px);\n  font-size: 24px;\n  outline: none;\n  color: ${PRIMARY_TEXT_COLOR};\n  font-family: VT323, monospace;\n  padding: 16px;\n  flex: 1;\n`;\n\nconst parsedStyle = css`\n  overflow: auto;\n  max-height: 500px;\n  padding: 0;\n  margin: 0;\n`;\n\nexport const InputContainer = () => {\n  const [parsed, setParsed] = React.useState(parseNotes(SAMPLE_SONG));\n  const onChange = (e: any) => setParsed(parseNotes(e.target.value));\n\n  return (\n    <div className={mainStyle}>\n      <textarea className={inputStyle} defaultValue={SAMPLE_SONG} onChange={onChange}></textarea>\n      <Player notes={parsed} />\n      <pre className={parsedStyle}>{JSON.stringify(parsed, null, 2)}</pre>\n    </div>\n  );\n};\n","import { css } from 'emotion';\nimport * as React from 'react';\n\nimport { Footer } from '../components/Footer';\nimport { Header } from '../components/Header';\nimport { PRIMARY_COLOR, PRIMARY_TEXT_COLOR } from '../consts/colors';\nimport { InputContainer } from './InputContainer';\n\nconst layoutStyle = css`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst mainStyle = css`\n  flex: 1;\n  background: ${PRIMARY_COLOR};\n  color: ${PRIMARY_TEXT_COLOR};\n`;\n\nexport const App = () => (\n  <div className={layoutStyle}>\n    <Header />\n    <main className={mainStyle}>\n      <InputContainer />\n    </main>\n    <Footer />\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { injectGlobal } from 'emotion';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './containers/App';\nimport { SECONDARY_TEXT_COLOR, SECONDARY_COLOR } from './consts/colors';\n\nimport * as serviceWorker from './serviceWorker';\n\ninjectGlobal`\n  html, body {\n    margin: 0;\n    height: 100%;\n    background: ${SECONDARY_COLOR};\n  }\n\n  #root {\n    height: 100%;\n    font-family: Quicksand, sans-serif;\n    font-size: 12px;\n    font-weight: 400;\n    color: ${SECONDARY_TEXT_COLOR};\n  }\n`;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.0a217aa9.svg\";"],"sourceRoot":""}